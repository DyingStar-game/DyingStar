@tool
extends Node3D
class_name PersitData

var parent: PhysicsBody3D
var data: DataObject
var current_uid: String = ""
var demo_step: int = 0  # Pour contr√¥ler la progression de la d√©mo
var demo_enabled: bool = true  # Pour d√©sactiver la d√©mo auto

func _enter_tree():
	check_parent()

func _ready():
	check_parent()
	setup_persistence_manager()
	create_test_data()

func setup_persistence_manager():
	var pm = PersistanceManager
	if not pm:
		push_error("PersistanceManager is null!")
		return
	
	# Connecter tous les signaux une seule fois
	if not pm.SaveCompleted.is_connected(_on_save_completed):
		pm.SaveCompleted.connect(_on_save_completed)
	
	if not pm.DeleteCompleted.is_connected(_on_delete_completed):
		pm.DeleteCompleted.connect(_on_delete_completed)
	
	if not pm.QueryCompleted.is_connected(_on_query_completed):
		pm.QueryCompleted.connect(_on_query_completed)
	
	if not pm.FindByIdCompleted.is_connected(_on_find_by_id_completed):
		pm.FindByIdCompleted.connect(_on_find_by_id_completed)
	
	# D√©marrer les op√©rations si le manager est pr√™t
	if pm.IsReady:
		print("‚úÖ Client d√©j√† pr√™t, d√©marrage des tests !")
		start_crud_demo()
	else:
		print("‚è≥ En attente du signal ClientReady...")
		if not pm.ClientReady.is_connected(_on_client_ready):
			pm.ClientReady.connect(_on_client_ready)

func create_test_data():
	data = DataObject.new()
	data.position = parent.position
	data.name = "TestObject_" + str(randi() % 1000)
	data.uid = "_:temp_" + str(randi() % 10000)

func check_parent():
	parent = get_parent()
	if parent and not (parent is PhysicsBody3D):
		push_error("PersitData is not children of PhysicsBody3D.")

# ============ EVENT HANDLERS ============
func _on_client_ready():
	print("üöÄ Signal ClientReady re√ßu !")
	start_crud_demo()

func _on_save_completed(success: bool, uid: String, error_message: String, request_id: String):
	print("üíæ Save completed - RequestID: ", request_id)
	if success:
		current_uid = uid
		data.uid = uid
		print("‚úÖ Objet sauvegard√© avec UID: ", uid)
		
		# Progression contr√¥l√©e de la d√©mo
		if demo_enabled and demo_step == 1:
			demo_step = 2
			print("‚è≠Ô∏è Prochaine √©tape: FindById dans 2 secondes...")
			await get_tree().create_timer(2.0).timeout
			test_find_by_id()
	else:
		print("‚ùå √âchec sauvegarde: ", error_message)

func _on_delete_completed(success: bool, error_message: String, request_id: String):
	print("üóëÔ∏è Delete completed - RequestID: ", request_id)
	if success:
		print("‚úÖ Objet supprim√© avec succ√®s")
		current_uid = ""
		
		# Fin de la d√©mo
		if demo_enabled and demo_step == 4:
			demo_step = 5
			print("\nüéâ === D√âMO CRUD TERMIN√âE ===")
			print("‚úÖ Toutes les op√©rations ont √©t√© test√©es avec succ√®s !")
			demo_enabled = false  # Arr√™ter la d√©mo
	else:
		print("‚ùå √âchec suppression: ", error_message)

func _on_query_completed(success: bool, json_data: String, error_message: String, request_id: String):
	print("üîç Query completed - RequestID: ", request_id)
	if success:
		print("‚úÖ Requ√™te ex√©cut√©e avec succ√®s")
		print("üìÑ Donn√©es JSON: ", json_data)
		
		# Progression contr√¥l√©e de la d√©mo
		if demo_enabled and demo_step == 3:
			demo_step = 4
			print("‚è≠Ô∏è Derni√®re √©tape: Delete dans 3 secondes...")
			print("‚ö†Ô∏è  L'objet va √™tre supprim√© d√©finitivement !")
			await get_tree().create_timer(3.0).timeout
			test_delete()
	else:
		print("‚ùå √âchec requ√™te: ", error_message)

func _on_find_by_id_completed(success: bool, json_data: String, error_message: String, request_id: String):
	print("üéØ FindById completed - RequestID: ", request_id)
	if success:
		print("‚úÖ Recherche par ID r√©ussie")
		print("üìÑ Donn√©es trouv√©es: ", json_data)
		
		# Progression contr√¥l√©e de la d√©mo
		if demo_enabled and demo_step == 2:
			demo_step = 3
			print("‚è≠Ô∏è Prochaine √©tape: Query dans 2 secondes...")
			await get_tree().create_timer(2.0).timeout
			test_query()
	else:
		print("‚ùå √âchec recherche: ", error_message)

# ============ CRUD OPERATIONS ============
func start_crud_demo():
	print("\nüé¨ === D√âMARRAGE D√âMO CRUD ===")
	print("üìã √âtapes pr√©vues:")
	print("  1Ô∏è‚É£ Save - Sauvegarder l'objet")
	print("  2Ô∏è‚É£ FindById - Rechercher par ID")
	print("  3Ô∏è‚É£ Query - Requ√™te g√©n√©rale")
	print("  4Ô∏è‚É£ Delete - Supprimer l'objet")
	print("‚ö†Ô∏è  Vous pouvez appeler disable_demo() pour arr√™ter la d√©mo automatique")
	
	demo_step = 1
	demo_enabled = true
	test_save()

func test_save():
	print("\nüíæ === TEST SAVE ===")
	var pm = PersistanceManager
	if not pm:
		return
	
	var serialized_data = data.serialize()
	print("üìù Sauvegarde de: ", serialized_data)
	pm.StartSaveAsync(serialized_data)

func test_find_by_id():
	if current_uid == "":
		print("‚ùå Pas d'UID pour tester FindById")
		return
	
	print("\nüéØ === TEST FIND BY ID ===")
	var pm = PersistanceManager
	if not pm:
		return
	
	print("üîç Recherche de l'UID: ", current_uid)
	pm.StartFindByIdAsync(current_uid)

func test_query():
	print("\nüîç === TEST QUERY ===")
	var pm = PersistanceManager
	if not pm:
		return
	
	# Requ√™te pour trouver tous les objets avec un nom
	var query = """
	{
		all(func: has(name)) {
			uid
			name
			position
			dgraph.type
		}
	}
	"""
	
	print("üìù Ex√©cution de la requ√™te...")
	pm.StartQueryAsync(query)

func test_delete():
	if current_uid == "":
		print("‚ùå Pas d'UID pour tester Delete")
		return
	
	print("\nüóëÔ∏è === TEST DELETE ===")
	var pm = PersistanceManager
	if not pm:
		return
	
	print("üóëÔ∏è Suppression de l'UID: ", current_uid)
	pm.StartDeleteAsync(current_uid)

# ============ CONTR√îLE DE LA D√âMO ============
func disable_demo():
	"""D√©sactive la d√©mo automatique"""
	demo_enabled = false
	demo_step = 0
	print("‚èπÔ∏è D√©mo automatique d√©sactiv√©e")

func enable_demo():
	"""R√©active la d√©mo automatique"""
	demo_enabled = true
	print("‚ñ∂Ô∏è D√©mo automatique r√©activ√©e")

func reset_demo():
	"""Remet la d√©mo √† z√©ro"""
	demo_step = 0
	demo_enabled = true
	print("üîÑ D√©mo remise √† z√©ro")

# ============ API PUBLIQUE POUR UTILISATION EXTERNE ============
func save_data():
	"""Sauvegarde les donn√©es actuelles"""
	var pm = PersistanceManager
	if pm and pm.IsReady:
		pm.StartSaveAsync(data.serialize())
	else:
		print("‚ùå PersistanceManager non disponible pour save_data")

func delete_data():
	"""Supprime l'objet de la base de donn√©es"""
	if current_uid == "":
		print("‚ùå Aucun UID √† supprimer")
		return
	
	var pm = PersistanceManager
	if pm and pm.IsReady:
		pm.StartDeleteAsync(current_uid)
	else:
		print("‚ùå PersistanceManager non disponible pour delete_data")

func find_data_by_id(uid: String):
	"""Recherche un objet par son UID"""
	var pm = PersistanceManager
	if pm and pm.IsReady:
		pm.StartFindByIdAsync(uid)
	else:
		print("‚ùå PersistanceManager non disponible pour find_data_by_id")

func execute_custom_query(query_string: String):
	"""Ex√©cute une requ√™te personnalis√©e"""
	var pm = PersistanceManager
	if pm and pm.IsReady:
		pm.StartQueryAsync(query_string)
	else:
		print("‚ùå PersistanceManager non disponible pour execute_custom_query")

# ============ UTILITAIRES ============
func get_current_uid() -> String:
	"""Retourne l'UID actuel de l'objet"""
	return current_uid

func is_saved() -> bool:
	"""V√©rifie si l'objet a √©t√© sauvegard√© (a un UID valide)"""
	return current_uid != "" and not current_uid.begins_with("_:")
